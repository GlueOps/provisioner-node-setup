---
# -----------------------------------------------------------------------------
# PLAY 1: Discover which SSH port is open.
# This runs first to find the correct port without failing.
# -----------------------------------------------------------------------------
- name: Discover Open SSH Port
  hosts: all
  gather_facts: false

  tasks:
    - name: Probe for SSH on default port 22
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: 22
        state: started
        timeout: 5
      delegate_to: localhost
      ignore_errors: true
      register: port_22_check

    - name: Probe for SSH on custom port 2222
      ansible.builtin.wait_for:
        host: "{{ ansible_host }}"
        port: 2222
        state: started
        timeout: 5
      delegate_to: localhost
      ignore_errors: true
      register: port_2222_check

    - name: Fail if neither SSH port is accessible
      ansible.builtin.fail:
        msg: "Cannot connect to host {{ inventory_hostname }} on port 22 or 2222. Please check the server and firewall."
      when: port_22_check.failed and port_2222_check.failed

    - name: Set discovered SSH port as a fact
      ansible.builtin.set_fact:
        discovered_ssh_port: "{{ 22 if not port_22_check.failed else 2222 }}"

    - name: Show which port was found
      ansible.builtin.debug:
        msg: "Host {{ inventory_hostname }} is accessible on port {{ discovered_ssh_port }}. Proceeding with configuration."

# -----------------------------------------------------------------------------
# PLAY 2: Main playbook, Using the discovered port.
# -----------------------------------------------------------------------------
- name: Setup Libvirt on the target node
  hosts: all
  become: yes
  vars:
    ansible_port: "{{ discovered_ssh_port }}"
    # https://snapshot.debian.org/
    #curl -s 'http://snapshot.debian.org/archive/debian/?year=2025&month=07' | grep -oP '202507\d{2}T\d{6}Z' | sort | tail -1
    snapshot_timestamp: "20250701T120000Z"
    # https://download.docker.com/linux/debian/dists/bookworm/pool/stable/amd64/
    # Ensure the version is prefixed with "5:" for docker version only
    docker_version_string: "5:28.3.0-1~debian.12~bookworm"
    docker_buildx_version: "0.25.0-1~debian.12~bookworm"
    docker_compose_version: "2.37.3-1~debian.12~bookworm"
    docker_containerd_version: "1.7.27-1"

  tasks:
    - name: Remove systemd-resolved
      apt:
        name: systemd-resolved
        state: absent
      ignore_errors: yes

    - name: Create dns configuration file
      template:
        src: ../templates/resolv.conf.j2
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: 0644

    - name: Set hostname if inventory_hostname is valid
      set_fact:
        hostname: "{{ inventory_hostname }}"
      failed_when: not inventory_hostname or inventory_hostname | length == 0

    - name: Set tailscale_auth_key if environment variable exists
      set_fact:
        tailscale_auth_key: "{{ lookup('env', 'TAILSCALE_AUTH_KEY') }}"
      when: lookup('env', 'TAILSCALE_AUTH_KEY') | length > 0
      no_log: true

    - name: Set timezone to UTC
      timezone:
        name: UTC

    - name: Set hostname
      hostname:
        name: "{{ hostname }}"
        use: debian

    - name: Update /etc/hosts file
      template:
        src: ../templates/hosts.j2
        dest: /etc/hosts
        owner: root
        group: root
        mode: 0644

    - name: Modify dnsmasq file
      template:
        src: ../templates/dnsmasq.j2
        dest: /etc/default/dnsmasq
        owner: root
        group: root
        mode: 0644

    - name: create directory for htoprc
      file:
        path:  /root/.config/htop
        state: directory

    - name: Create htoprc
      template:
        src: ../templates/htoprc.j2
        dest: /root/.config/htop/htoprc
        owner: root
        group: root
        mode: 0644

    - name: Create a one-time backup of the original sources.list for safety
      ansible.builtin.command: mv /etc/apt/sources.list /etc/apt/sources.list.original_backup
      args:
        creates: /etc/apt/sources.list.original_backup
      changed_when: false
      failed_when: false

    - name: Enforce that the default sources.list file is absent
      ansible.builtin.file:
        path: /etc/apt/sources.list
        state: absent
      notify: update apt cache

    - name: Find all existing .list files in sources.list.d
      ansible.builtin.find:
        paths: /etc/apt/sources.list.d/
        patterns: "*.list"
      register: found_source_files
    
    - name: Remove all unmanaged .list files from sources.list.d
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ found_source_files.files }}"
      when: item.path | basename != '00-ansible-snapshot.list'
      notify: update apt cache

    - name: Find all editor backup files in /etc/apt/ and subdirectories
      ansible.builtin.find:
        paths: /etc/apt/
        patterns: "*~"
        recurse: yes
      register: backup_files_to_remove

    - name: Remove found editor backup files to enforce a clean state
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ backup_files_to_remove.files }}"
      loop_control:
        label: "{{ item.path }}"

    - name: Ensure no pinning preference files exist
      ansible.builtin.find:
        paths: /etc/apt/preferences.d/
        patterns: "*"
      register: found_pref_files

    - name: Remove all pinning preference files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ found_pref_files.files }}"
      notify: update apt cache

    - name: Deploy snapshot sources list from template
      ansible.builtin.template:
        src: ../templates/snapshot.list.j2
        dest: /etc/apt/sources.list.d/00-ansible-snapshot.list
        owner: root
        group: root
        mode: '0644'
      notify: update apt cache

    - name: Force handlers to run to update apt cache before upgrade
      ansible.builtin.meta: flush_handlers

    - name: Perform a full-upgrade to align system with the snapshot
      ansible.builtin.apt:
        upgrade: full
        autoremove: yes

    - name: Install libvirt, libvirt dependencies, and other packages
      apt:
        name: 
          - dnsmasq
          - qemu-system-x86
          - libvirt-daemon-system
          - libvirt-clients
          - bridge-utils
          - virtinst
          - virt-manager
          - qemu-utils
          - xmlstarlet
          - jq
          - htop
          - curl
          - tmux
          - ca-certificates
          - libnss-libvirt
        state: present
        allow_downgrade: yes

    - name: Enable and start libvirtd service
      service:
        name: libvirtd
        enabled: yes
        state: started

    - name: Check libvirt 'default' network state
      command: virsh net-info default
      register: net_info
      changed_when: false
      failed_when: false

    - name: Start the default libvirt network if it is not active
      command: virsh net-start default
      when: net_info.rc == 0 and net_info.stdout is search("Active:\s+no")

    - name: Enable autostart for the default libvirt network
      command: virsh net-autostart default
      when: net_info.rc == 0 and net_info.stdout is search("Autostart:\s+no")

    - name: Modify nsswitch.conf
      template:
        src: ../templates/nsswitch.conf.j2
        dest: /etc/nsswitch.conf
        owner: root
        group: root
        mode: 0644

    - name: Modify sshd_config
      template:
        src: ../templates/sshd_config.j2
        dest: /etc/ssh/sshd_config
        owner: root
        group: root
        mode: 0644

    - name: Restart sshd service
      service:
        name: sshd
        state: restarted

    - name: Remove all users except root
      user:
        name: "{{ item }}"
        state: absent
        remove: yes
      loop:
        - glueops
        - admin
        - debian
    
    - name: Add public key to authorized_keys
      authorized_key:
        user: root  
        key: "{{ keys }}"
        state: present
        exclusive: true

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: 0755

    - name: Add Docker GPG apt Key
      get_url:
        url: https://download.docker.com/linux/debian/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: 0644

    - name: Add Tailscale GPG apt Key
      get_url:
        url: https://pkgs.tailscale.com/stable/debian/bookworm.noarmor.gpg
        dest: /etc/apt/keyrings/tailscale-archive-keyring.gpg
        mode: 0644

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian {{ ansible_lsb.codename }} stable"
        filename: docker
        state: present
        update_cache: no

    - name: Add Tailscale repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/tailscale-archive-keyring.gpg] https://pkgs.tailscale.com/stable/debian {{ ansible_lsb.codename }} main"
        filename: tailscale
        state: present
        update_cache: no

    - name: Force apt-get update allowing expired snapshot metadata
      command: apt-get update -o Acquire::Check-Valid-Until=false

    - name: "Install Docker and tailscale packages"
      ansible.builtin.apt:
        name:
          - "docker-ce={{ docker_version_string }}"
          - "docker-ce-cli={{ docker_version_string }}"
          - "containerd.io={{ docker_containerd_version }}"
          - "docker-buildx-plugin={{ docker_buildx_version }}"
          - "docker-compose-plugin={{ docker_compose_version }}"
          - "tailscale"
        state: present
        allow_downgrade: yes

    - name: Start tailscale
      command: tailscale up --authkey {{ tailscale_auth_key }} --ssh
      when: tailscale_auth_key is defined
      no_log: true

    - name: Ensure /opt/provisioner-cache directory exists
      file:
        path: /opt/provisioner-cache
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: Create docker compose file
      template:
        src: ../templates/docker-compose.yaml.j2
        dest: /opt/provisioner-cache/docker-compose.yaml
        owner: root
        group: root
        mode: 0644

    - name: Create provisioner-cache file
      template:
        src: ../templates/cache.conf.j2
        dest: /opt/provisioner-cache/cache.conf
        owner: root
        group: root
        mode: 0644

    - name: Create systemd service file for provisioner cache
      template:
        src: ../templates/provisioner-cache.service.j2
        dest: /etc/systemd/system/provisioner-cache.service
        owner: root
        group: root
        mode: 0644

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Enable and start Provisioner Cache service
      service:
        name: provisioner-cache
        enabled: yes
        state: started

  handlers:
    - name: update apt cache
      ansible.builtin.command: >
        apt-get update -o Acquire::Check-Valid-Until=false
